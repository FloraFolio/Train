// Mocks generated by Mockito 5.4.6 from annotations
// in flora_folio/test/photo_manager_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i5;

import 'package:flora_folio/data/models/photo_status.dart' as _i6;
import 'package:flora_folio/data/models/plant_photo.dart' as _i8;
import 'package:flora_folio/data/repositories/plant_photo_repository.dart'
    as _i3;
import 'package:flora_folio/data/services/photo_analysis_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePhotoAnalysisResult_0 extends _i1.SmartFake
    implements _i2.PhotoAnalysisResult {
  _FakePhotoAnalysisResult_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [PlantPhotoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlantPhotoRepository extends _i1.Mock
    implements _i3.PlantPhotoRepository {
  @override
  _i4.Future<String> addPlantPhoto({
    required _i5.File? photoFile,
    String? speciesId,
    String? description,
    _i6.PhotoStatus? status = _i6.PhotoStatus.ANALYZING,
    Map<String, dynamic>? additionalMetadata,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#addPlantPhoto, [], {
              #photoFile: photoFile,
              #speciesId: speciesId,
              #description: description,
              #status: status,
              #additionalMetadata: additionalMetadata,
            }),
            returnValue: _i4.Future<String>.value(
              _i7.dummyValue<String>(
                this,
                Invocation.method(#addPlantPhoto, [], {
                  #photoFile: photoFile,
                  #speciesId: speciesId,
                  #description: description,
                  #status: status,
                  #additionalMetadata: additionalMetadata,
                }),
              ),
            ),
            returnValueForMissingStub: _i4.Future<String>.value(
              _i7.dummyValue<String>(
                this,
                Invocation.method(#addPlantPhoto, [], {
                  #photoFile: photoFile,
                  #speciesId: speciesId,
                  #description: description,
                  #status: status,
                  #additionalMetadata: additionalMetadata,
                }),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<bool> updatePhotoAnalysisResult({
    required String? photoId,
    String? speciesId,
    String? description,
    required _i6.PhotoStatus? status,
    Map<String, dynamic>? additionalMetadata,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updatePhotoAnalysisResult, [], {
              #photoId: photoId,
              #speciesId: speciesId,
              #description: description,
              #status: status,
              #additionalMetadata: additionalMetadata,
            }),
            returnValue: _i4.Future<bool>.value(false),
            returnValueForMissingStub: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<_i8.PlantPhoto?> getPhotoById(String? photoId) =>
      (super.noSuchMethod(
            Invocation.method(#getPhotoById, [photoId]),
            returnValue: _i4.Future<_i8.PlantPhoto?>.value(),
            returnValueForMissingStub: _i4.Future<_i8.PlantPhoto?>.value(),
          )
          as _i4.Future<_i8.PlantPhoto?>);

  @override
  _i4.Future<List<_i8.PlantPhoto>> getPhotosBySpeciesId(
    String? speciesId, {
    int? limit,
    int? offset,
    _i6.SortOrder? sortOrder = _i6.SortOrder.newest,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getPhotosBySpeciesId,
              [speciesId],
              {#limit: limit, #offset: offset, #sortOrder: sortOrder},
            ),
            returnValue: _i4.Future<List<_i8.PlantPhoto>>.value(
              <_i8.PlantPhoto>[],
            ),
            returnValueForMissingStub: _i4.Future<List<_i8.PlantPhoto>>.value(
              <_i8.PlantPhoto>[],
            ),
          )
          as _i4.Future<List<_i8.PlantPhoto>>);

  @override
  _i4.Future<List<_i8.PlantPhoto>> getPhotosByStatus(
    _i6.PhotoStatus? status, {
    int? limit,
    int? offset,
    _i6.SortOrder? sortOrder = _i6.SortOrder.newest,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getPhotosByStatus,
              [status],
              {#limit: limit, #offset: offset, #sortOrder: sortOrder},
            ),
            returnValue: _i4.Future<List<_i8.PlantPhoto>>.value(
              <_i8.PlantPhoto>[],
            ),
            returnValueForMissingStub: _i4.Future<List<_i8.PlantPhoto>>.value(
              <_i8.PlantPhoto>[],
            ),
          )
          as _i4.Future<List<_i8.PlantPhoto>>);

  @override
  _i4.Future<List<_i8.PlantPhoto>> getAllPhotos({
    int? limit,
    int? offset,
    _i6.SortOrder? sortOrder = _i6.SortOrder.newest,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getAllPhotos, [], {
              #limit: limit,
              #offset: offset,
              #sortOrder: sortOrder,
            }),
            returnValue: _i4.Future<List<_i8.PlantPhoto>>.value(
              <_i8.PlantPhoto>[],
            ),
            returnValueForMissingStub: _i4.Future<List<_i8.PlantPhoto>>.value(
              <_i8.PlantPhoto>[],
            ),
          )
          as _i4.Future<List<_i8.PlantPhoto>>);

  @override
  _i4.Future<bool> deletePhoto(String? photoId) =>
      (super.noSuchMethod(
            Invocation.method(#deletePhoto, [photoId]),
            returnValue: _i4.Future<bool>.value(false),
            returnValueForMissingStub: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}

/// A class which mocks [PhotoAnalysisService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhotoAnalysisService extends _i1.Mock
    implements _i2.PhotoAnalysisService {
  @override
  _i4.Future<_i2.PhotoAnalysisResult> analyzePhoto(_i5.File? photoFile) =>
      (super.noSuchMethod(
            Invocation.method(#analyzePhoto, [photoFile]),
            returnValue: _i4.Future<_i2.PhotoAnalysisResult>.value(
              _FakePhotoAnalysisResult_0(
                this,
                Invocation.method(#analyzePhoto, [photoFile]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i2.PhotoAnalysisResult>.value(
                  _FakePhotoAnalysisResult_0(
                    this,
                    Invocation.method(#analyzePhoto, [photoFile]),
                  ),
                ),
          )
          as _i4.Future<_i2.PhotoAnalysisResult>);
}
